ggsave(paste0("plot_poisson/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Lambda +
ggtitle(paste0("Day: ", ret$day[i]))
ggsave(paste0("plot_poisson/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_poisson/plot*.png demo_poisson.gif")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
library(gganimate)
library(stringr)
source("daily_posterior.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
nreps <- 1
days <- 14
per_day <- 500
alpha <- 3
beta <- 100
# Binomial
effect <- 0
ret <- simulate_binomial(
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_expected_loss_binomial, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Probability +
ggtitle(paste0("Day: ", ret$day[i]))
ggsave(paste0("plot_binomial/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
library(gganimate)
library(stringr)
source("daily_posterior.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
days <- 30
per_day <- 500
# Binomial
alpha <- 3
beta <- 100
effect <- 0
ret <- simulate_binomial(
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_expected_loss_binomial, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Probability +
ggtitle(paste0("Day: ", ret$day[i]))
ggsave(paste0("plot_binomial/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_binomial/plot*.png demo_binomial.gif")
# Poisson
alpha <- 23
beta <- 1
effect <- 0.1
ret <- simulate_poisson(
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_expected_loss_poisson, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Lambda +
ggtitle(paste0("Day: ", ret$day[i]))
ggsave(paste0("plot_poisson/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_poisson/plot*.png demo_poisson.gif")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
library(gganimate)
library(stringr)
source("daily_posterior.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
days <- 14
per_day <- 500
# Binomial
alpha <- 3
beta <- 100
effect <- 0
ret <- simulate_binomial(
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_posterior_binomial, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Probability +
ggtitle(paste0("Day: ", ret$day[i]))
ggsave(paste0("plot_binomial/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_binomial/plot*.png demo_binomial.gif")
# Poisson
alpha <- 23
beta <- 1
effect <- 0.1
ret <- simulate_poisson(
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_posterior_poisson, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Lambda +
ggtitle(paste0("Day: ", ret$day[i]))
ggsave(paste0("plot_poisson/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_poisson/plot*.png demo_poisson.gif")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
library(gganimate)
library(stringr)
source("daily_posterior.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
days <- 30
per_day <- 500
# Binomial
alpha <- 3
beta <- 100
effect <- 0
ret <- simulate_binomial(
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_posterior_binomial, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Probability +
ggtitle(paste0("Binomial - Day: ", ret$day[i]))
ggsave(paste0("plot_binomial/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_binomial/plot*.png demo_binomial.gif")
# Poisson
alpha <- 23
beta <- 1
effect <- 0.1
ret <- simulate_poisson(
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(posterior = do.call(vec_posterior_poisson, .))
for (i in 1:nrow(ret)){
p <- ret$posterior[i]$Lambda +
ggtitle(paste0("Poisson - Day: ", ret$day[i]))
ggsave(paste0("plot_poisson/plot", str_pad(i, 2, pad = "0"), ".png"),
p, device = png())
dev.off()
}
system("convert -delay 60 plot_poisson/plot*.png demo_poisson.gif")
pw
pwd()
getwd()
setwd("/Users/rain/Documents/BayesianAB/one_exp_sim")
setwd("~/Documents/BayesianAB/multi_exp_sim")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
nreps <- 500
days <- 30
install.packages("tidyverse")
install.packages("tidyverse")
library(bayesAB)
library(ggplot2)
library(tidyverse)
library(gridExtra)
## Prior Confidence
grid.arrange(
plotBeta(alpha = 3, beta = 100) + ggtitle("Directional-Beta (alpha=3, beta=100)"),
plotBeta(alpha = 30, beta = 1000) + ggtitle("Confident-Beta (alpha=30, beta=1000)"),
plotBeta(alpha = 1, beta = 1) + ggtitle("Neutral-Beta (alpha=1, beta=1)"),
plotBeta(alpha = 30, beta = 10) + ggtitle("Wrong-Beta (alpha=30, beta=10)"),
nrow=2)
grid.arrange(
plotGamma(shape = 23, rate = 1) + ggtitle("Directional-Gamma (shape=23, rate=1)"),
plotGamma(shape = 230, rate = 10) + ggtitle("Confident-Gamma (shape=230, rate=10)"),
plotGamma(shape = 6, rate = 1) + ggtitle("Wrong-Gamma (shape=6, rate=1)"),
nrow=1)
## Parameter Space
category <- c('binomial')
effect <- c(0, 0.001, 0.005)
prior_confidence <- c('1,1', '3,100', '30,1000', '30,10')
sample_size_per_day <- c(500, 5000, 50000)
design <- expand.grid(
category=category,
effect=effect,
prior_confidence=prior_confidence,
sample_size_per_day=sample_size_per_day,
stringsAsFactors = FALSE)
prior_params <- as.data.frame(do.call('rbind', strsplit(as.character(design$prior_confidence),',',fixed=TRUE)))
bin_design <- design %>% mutate(prior_alpha=prior_params$V1, prior_beta=prior_params$V2) %>%
select(category, effect, prior_alpha, prior_beta, sample_size_per_day) %>%
arrange(category, effect, prior_alpha, prior_beta, sample_size_per_day)
category <- c('poisson')
effect <- c(0, 0.01, 0.1)
prior_confidence <- c('23,1', '230,10', '6,1')
sample_size_per_day <- c(500, 5000, 50000)
design <- expand.grid(
category=category,
effect=effect,
prior_confidence=prior_confidence,
sample_size_per_day=sample_size_per_day,
stringsAsFactors = FALSE)
prior_params <- as.data.frame(do.call('rbind', strsplit(as.character(design$prior_confidence),',',fixed=TRUE)))
pois_design <- design %>% mutate(prior_alpha=prior_params$V1, prior_beta=prior_params$V2) %>%
select(category, effect, prior_alpha, prior_beta, sample_size_per_day) %>%
arrange(category, effect, prior_alpha, prior_beta, sample_size_per_day)
design <- rbind(bin_design, pois_design)
design
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
nreps <- 50
days <- 30
# Binomial (Proportion)
bin_design <- design %>% filter(category == 'binomial')
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
nreps <- 50
days <- 30
# Binomial (Proportion)
bin_design <- design %>% filter(category == 'binomial')
for(row in 1:nrow(bin_design)){
effect <- bin_design[row,'effect']
alpha <- bin_design[row, 'prior_alpha']
beta <- bin_design[row, 'prior_beta']
per_day <- bin_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_binomial(
nreps = nreps,
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_binomial, .)) %>%
mutate(pval = do.call(vec_two_prop_pval, .))
print("Simulation step done!")
bin_design <- evaluate_simulation(bin_design, row, ret, thresholds, prefix, cat='binomial')
}
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
nreps <- 50
days <- 30
# Binomial (Proportion)
bin_design <- design %>% filter(category == 'binomial')
for(row in 1:nrow(bin_design)){
effect <- bin_design[row,'effect']
alpha <- bin_design[row, 'prior_alpha']
beta <- bin_design[row, 'prior_beta']
per_day <- bin_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_binomial(
nreps = nreps,
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_binomial, .)) %>%
mutate(pval = do.call(vec_two_prop_pval, .))
print("Simulation step done!")
bin_design <- evaluate_simulation(bin_design, row, ret, thresholds, prefix, cat='binomial')
}
bin_design
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
sig_thres <- 0.05
nreps <- 50
days <- 30
# Binomial (Proportion)
bin_design <- design %>% filter(category == 'binomial')
for(row in 1:nrow(bin_design)){
effect <- bin_design[row,'effect']
alpha <- bin_design[row, 'prior_alpha']
beta <- bin_design[row, 'prior_beta']
per_day <- bin_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_binomial(
nreps = nreps,
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_binomial, .)) %>%
mutate(pval = do.call(vec_two_prop_pval, .))
print("Simulation step done!")
bin_design <- evaluate_simulation(bin_design, row, ret, thresholds, prefix, cat='binomial')
}
# Poisson (Count Data)
pois_design <- design %>% filter(category == 'poisson')
for(row in 1:nrow(pois_design)){
effect <- pois_design[row,'effect']
alpha <- pois_design[row, 'prior_alpha']
beta <- pois_design[row, 'prior_beta']
per_day <- pois_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_poisson(
nreps = nreps,
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_poisson, .)) %>%
mutate(pval = do.call(vec_two_t_pval, .))
print("Simulation step done!")
pois_design <- evaluate_simulation(pois_design, row, ret, thresholds, prefix, cat='poisson')
}
final_design <- rbind(bin_design, pois_design)
final_design <- read.csv("final_design.csv", stringsAsFactors = FALSE)
for(i in 1:nrow(final_design)){
if(final_design$category[i] == 'binomial' & final_design$prior_alpha[i] == 3 & final_design$prior_beta[i] == 10){
final_design$prior[i] = 'directional'
}
else if(final_design$category[i] == 'binomial' & final_design$prior_alpha[i] == 30 & final_design$prior_beta[i] == 100){
final_design$prior[i] = 'confident'
}
else if(final_design$category[i] == 'binomial' & final_design$prior_alpha[i] == 30 & final_design$prior_beta[i] == 10){
final_design$prior[i] = 'wrong'
}
else if(final_design$category[i] == 'binomial' & final_design$prior_alpha[i] == 1 & final_design$prior_beta[i] == 1){
final_design$prior[i] = 'neutral'
}
else if(final_design$category[i] == 'poisson' & final_design$prior_alpha[i] == 23 & final_design$prior_beta[i] == 1){
final_design$prior[i] = 'directional'
}
else if(final_design$category[i] == 'poisson' & final_design$prior_alpha[i] == 230 & final_design$prior_beta[i] == 10){
final_design$prior[i] = 'confident'
}
else if(final_design$category[i] == 'poisson' & final_design$prior_alpha[i] == 18 & final_design$prior_beta[i] == 1){
final_design$prior[i] = 'wrong'
}
else{
final_design$prior[i] = 'others'
}
}
perc_as_num <- function(vec){
as.numeric(gsub("%", "", vec))
}
final_design <- final_design %>%
mutate(peek_multiplier_freq = round(perc_as_num(freq_treat_peek)/perc_as_num(freq_treat),1),
peek_multiplier_bayes_0.1 = round(perc_as_num(bayes_treat_peek_0.1)/perc_as_num(bayes_treat_0.1),1),
peek_multiplier_bayes_0.01 = round(perc_as_num(bayes_treat_peek_0.01)/perc_as_num(bayes_treat_0.01),1),
peek_multiplier_bayes_0.001 = round(perc_as_num(bayes_treat_peek_0.001)/perc_as_num(bayes_treat_0.001),1),
peek_multiplier_bayes_0.0001 = round(perc_as_num(bayes_treat_peek_1e.04)/perc_as_num(bayes_treat_1e.04),1),
peek_multiplier_bayes_0.00001 = round(perc_as_num(bayes_treat_peek_1e.05)/perc_as_num(bayes_treat_1e.05),1),
)
final_design[final_design == 'NaN'] = NA
final_design[final_design == 'Inf'] = NA
final_design <- final_design %>%
select(category, effect, prior_alpha, prior_beta, prior, sample_size_per_day,
freq_treat, freq_treat_peek, peek_multiplier_freq,
bayes_treat_0.1, bayes_treat_peek_0.1, peek_multiplier_bayes_0.1,
bayes_treat_0.01, bayes_treat_peek_0.01, peek_multiplier_bayes_0.01,
bayes_treat_0.001, bayes_treat_peek_0.001, peek_multiplier_bayes_0.001,
bayes_treat_1e.04, bayes_treat_peek_1e.04, peek_multiplier_bayes_0.0001,
bayes_treat_1e.05, bayes_treat_peek_1e.05, peek_multiplier_bayes_0.00001,
)
write.csv(final_design, "final_design_master.csv", row.names = FALSE)
