if(pois_design$category[i] == 'poisson' & pois_design$prior_alpha[i] == 23 & pois_design$prior_beta[i] == 1){
pois_design$prior[i] = 'directional'
}
else if(pois_design$category[i] == 'poisson' & pois_design$prior_alpha[i] == 230 & pois_design$prior_beta[i] == 10){
pois_design$prior[i] = 'confident'
}
else if(pois_design$category[i] == 'poisson' & pois_design$prior_alpha[i] == 6 & pois_design$prior_beta[i] == 1){
pois_design$prior[i] = 'wrong'
}
else{
pois_design$prior[i] = 'others'
}
}
pois_design <- pois_design %>%
mutate(peek_multiplier_freq = round(perc_as_num(freq_treat_peek)/perc_as_num(freq_treat),1),
peek_multiplier_bayes_0.1 = round(perc_as_num(bayes_treat_peek_0.1)/perc_as_num(bayes_treat_0.1),1),
peek_multiplier_bayes_0.01 = round(perc_as_num(bayes_treat_peek_0.01)/perc_as_num(bayes_treat_0.01),1),
peek_multiplier_bayes_0.001 = round(perc_as_num(bayes_treat_peek_0.001)/perc_as_num(bayes_treat_0.001),1),
peek_multiplier_bayes_0.0001 = round(perc_as_num(bayes_treat_peek_0.0001)/perc_as_num(bayes_treat_0.0001),1),
peek_multiplier_bayes_0.00001 = round(perc_as_num(bayes_treat_peek_0.00001)/perc_as_num(bayes_treat_0.00001),1),
)
pois_design[pois_design == 'NaN'] = NA
pois_design[pois_design == 'Inf'] = NA
pois_design$case_id <- ifelse(pois_design$effect == 0, 3, 4)
pois_design <- pois_design %>%
select(case_id, category, effect, sample_size_per_day,
prior_alpha, prior_beta, prior,
freq_treat, freq_treat_peek, peek_multiplier_freq,
bayes_treat_0.1, bayes_treat_peek_0.1, peek_multiplier_bayes_0.1,
bayes_treat_0.01, bayes_treat_peek_0.01, peek_multiplier_bayes_0.01,
bayes_treat_0.001, bayes_treat_peek_0.001, peek_multiplier_bayes_0.001,
bayes_treat_0.0001, bayes_treat_peek_0.0001, peek_multiplier_bayes_0.0001,
bayes_treat_0.00001, bayes_treat_peek_0.00001, peek_multiplier_bayes_0.00001,
)
pois_design
perc_as_num <- function(vec){
as.numeric(gsub("%", "", vec))
}
ber_design <- read.csv("output/design_bernoulli.csv", stringsAsFactors = FALSE)
pois_design <- read.csv("output/design_poisson.csv", stringsAsFactors = FALSE)
ber_exp_design <- read.csv("output/design_bernoulli_exponential.csv", stringsAsFactors = FALSE)
# Bernoulli
for(i in 1:nrow(ber_design)){
if(ber_design$category[i] == 'bernoulli' & ber_design$prior_alpha[i] == 3 & ber_design$prior_beta[i] == 100){
ber_design$prior[i] = 'directional'
}
else if(ber_design$category[i] == 'bernoulli' & ber_design$prior_alpha[i] == 30 & ber_design$prior_beta[i] == 1000){
ber_design$prior[i] = 'confident'
}
else if(ber_design$category[i] == 'bernoulli' & ber_design$prior_alpha[i] == 30 & ber_design$prior_beta[i] == 10){
ber_design$prior[i] = 'wrong'
}
else if(ber_design$category[i] == 'bernoulli' & ber_design$prior_alpha[i] == 1 & ber_design$prior_beta[i] == 1){
ber_design$prior[i] = 'neutral'
}
else{
ber_design$prior[i] = 'others'
}
}
ber_design <- ber_design %>%
mutate(peek_multiplier_freq = round(perc_as_num(freq_treat_peek)/perc_as_num(freq_treat),1),
peek_multiplier_bayes_0.1 = round(perc_as_num(bayes_treat_peek_0.1)/perc_as_num(bayes_treat_0.1),1),
peek_multiplier_bayes_0.01 = round(perc_as_num(bayes_treat_peek_0.01)/perc_as_num(bayes_treat_0.01),1),
peek_multiplier_bayes_0.001 = round(perc_as_num(bayes_treat_peek_0.001)/perc_as_num(bayes_treat_0.001),1),
peek_multiplier_bayes_0.0001 = round(perc_as_num(bayes_treat_peek_0.0001)/perc_as_num(bayes_treat_0.0001),1),
peek_multiplier_bayes_0.00001 = round(perc_as_num(bayes_treat_peek_0.00001)/perc_as_num(bayes_treat_0.00001),1),
)
ber_design[ber_design == 'NaN'] = NA
ber_design[ber_design == 'Inf'] = NA
ber_design$case_id <- ifelse(ber_design$effect == 0, 1, 2)
ber_design <- ber_design %>%
select(case_id, category, effect, sample_size_per_day,
prior_alpha, prior_beta, prior,
freq_treat, freq_treat_peek, peek_multiplier_freq,
bayes_treat_0.1, bayes_treat_peek_0.1, peek_multiplier_bayes_0.1,
bayes_treat_0.01, bayes_treat_peek_0.01, peek_multiplier_bayes_0.01,
bayes_treat_0.001, bayes_treat_peek_0.001, peek_multiplier_bayes_0.001,
bayes_treat_0.0001, bayes_treat_peek_0.0001, peek_multiplier_bayes_0.0001,
bayes_treat_0.00001, bayes_treat_peek_0.00001, peek_multiplier_bayes_0.00001,
)
# Poisson
for(i in 1:nrow(pois_design)){
if(pois_design$category[i] == 'poisson' & pois_design$prior_alpha[i] == 23 & pois_design$prior_beta[i] == 1){
pois_design$prior[i] = 'directional'
}
else if(pois_design$category[i] == 'poisson' & pois_design$prior_alpha[i] == 230 & pois_design$prior_beta[i] == 10){
pois_design$prior[i] = 'confident'
}
else if(pois_design$category[i] == 'poisson' & pois_design$prior_alpha[i] == 6 & pois_design$prior_beta[i] == 1){
pois_design$prior[i] = 'wrong'
}
else{
pois_design$prior[i] = 'others'
}
}
pois_design <- pois_design %>%
mutate(peek_multiplier_freq = round(perc_as_num(freq_treat_peek)/perc_as_num(freq_treat),1),
peek_multiplier_bayes_0.1 = round(perc_as_num(bayes_treat_peek_0.1)/perc_as_num(bayes_treat_0.1),1),
peek_multiplier_bayes_0.01 = round(perc_as_num(bayes_treat_peek_0.01)/perc_as_num(bayes_treat_0.01),1),
peek_multiplier_bayes_0.001 = round(perc_as_num(bayes_treat_peek_0.001)/perc_as_num(bayes_treat_0.001),1),
peek_multiplier_bayes_0.0001 = round(perc_as_num(bayes_treat_peek_0.0001)/perc_as_num(bayes_treat_0.0001),1),
peek_multiplier_bayes_0.00001 = round(perc_as_num(bayes_treat_peek_0.00001)/perc_as_num(bayes_treat_0.00001),1),
)
pois_design[pois_design == 'NaN'] = NA
pois_design[pois_design == 'Inf'] = NA
pois_design$case_id <- ifelse(pois_design$effect == 0, 3, 4)
pois_design <- pois_design %>%
select(case_id, category, effect, sample_size_per_day,
prior_alpha, prior_beta, prior,
freq_treat, freq_treat_peek, peek_multiplier_freq,
bayes_treat_0.1, bayes_treat_peek_0.1, peek_multiplier_bayes_0.1,
bayes_treat_0.01, bayes_treat_peek_0.01, peek_multiplier_bayes_0.01,
bayes_treat_0.001, bayes_treat_peek_0.001, peek_multiplier_bayes_0.001,
bayes_treat_0.0001, bayes_treat_peek_0.0001, peek_multiplier_bayes_0.0001,
bayes_treat_0.00001, bayes_treat_peek_0.00001, peek_multiplier_bayes_0.00001,
)
# Bernoulli-Exponential
for(i in 1:nrow(ber_exp_design)){
if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha1[i] == 3 & ber_exp_design$prior_beta1[i] == 100){
ber_exp_design$prior1[i] = 'directional'
}
else if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha1[i] == 30 & ber_exp_design$prior_beta1[i] == 1000){
ber_exp_design$prior1[i] = 'confident'
}
else if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha1[i] == 30 & ber_exp_design$prior_beta1[i] == 10){
ber_exp_design$prior1[i] = 'wrong'
}
else if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha1[i] == 1 & ber_exp_design$prior_beta1[i] == 1){
ber_exp_design$prior1[i] = 'neutral'
}
else{
ber_exp_design$prior1[i] = 'others'
}
}
for(i in 1:nrow(ber_exp_design)){
if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha2[i] == 25 & ber_exp_design$prior_beta2[i] == 5){
ber_exp_design$prior2[i] = 'directional'
}
else if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha2[i] == 250 & ber_exp_design$prior_beta2[i] == 50){
ber_exp_design$prior2[i] = 'confident'
}
else if(ber_exp_design$category[i] == 'bernoulli-exponential' & ber_exp_design$prior_alpha2[i] == 2 & ber_exp_design$prior_beta2[i] == 1){
ber_exp_design$prior2[i] = 'wrong'
}
else{
ber_exp_design$prior2[i] = 'others'
}
}
ber_exp_design <- ber_exp_design %>%
mutate(peek_multiplier_freq = round(perc_as_num(freq_treat_peek)/perc_as_num(freq_treat),1),
peek_multiplier_bayes_0.1 = round(perc_as_num(bayes_treat_peek_0.1)/perc_as_num(bayes_treat_0.1),1),
peek_multiplier_bayes_0.01 = round(perc_as_num(bayes_treat_peek_0.01)/perc_as_num(bayes_treat_0.01),1),
peek_multiplier_bayes_0.001 = round(perc_as_num(bayes_treat_peek_0.001)/perc_as_num(bayes_treat_0.001),1),
peek_multiplier_bayes_0.0001 = round(perc_as_num(bayes_treat_peek_0.0001)/perc_as_num(bayes_treat_0.0001),1),
peek_multiplier_bayes_0.00001 = round(perc_as_num(bayes_treat_peek_0.00001)/perc_as_num(bayes_treat_0.00001),1),
)
ber_exp_design[ber_exp_design == 'NaN'] = NA
ber_exp_design[ber_exp_design == 'Inf'] = NA
ber_exp_design$case_id <- ifelse((ber_exp_design$effect_p == 0) & (ber_exp_design$effect_lambda == 0), 5, 6)
ber_exp_design <- ber_exp_design %>%
select(case_id, category, effect_p, effect_lambda, sample_size_per_day,
prior_alpha1, prior_beta1, prior_alpha2, prior_beta2, prior1, prior2,
freq_treat, freq_treat_peek, peek_multiplier_freq,
bayes_treat_0.1, bayes_treat_peek_0.1, peek_multiplier_bayes_0.1,
bayes_treat_0.01, bayes_treat_peek_0.01, peek_multiplier_bayes_0.01,
bayes_treat_0.001, bayes_treat_peek_0.001, peek_multiplier_bayes_0.001,
bayes_treat_0.0001, bayes_treat_peek_0.0001, peek_multiplier_bayes_0.0001,
bayes_treat_0.00001, bayes_treat_peek_0.00001, peek_multiplier_bayes_0.00001,
)
write.csv(ber_design, "output/design_labeled_bernoulli.csv", row.names = FALSE)
write.csv(pois_design, "output/design_labeled_poisson.csv", row.names = FALSE)
write.csv(ber_exp_design, "output/design_labeled_bernoulli_exponential.csv", row.names = FALSE)
install.packages("parallel")
?bayesTest
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
library(gganimate)
library(stringr)
source("daily_posterior.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
setwd("~/Documents/BayesianAB/one_exp_sim")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
library(gganimate)
library(stringr)
source("daily_posterior.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
days <- 30
per_day <- 500
# Case 6 - Benoulli-Exponential - Effect True
ret <- simulate_bernoulli_exponential(
days = days,
pB = 0.03,
lambdaB = 5,
effect_p = 0.01,
effect_lambda = 0.1,
per_day = per_day,
alpha1 = 3,
beta1 = 100,
alpha2 = 25,
beta2 = 5)
ret <- ret %>%
mutate(posterior = do.call(vec_posterior_bernoulli_exponential, .))
ret
ret
# Case 3 - Poisson - Effect False
ret <- simulate_poisson(
days = days,
lambdaB = 23,
effect = 0,
per_day = per_day,
alpha = 23,
beta = 1)
ret <- ret %>%
mutate(posterior = do.call(vec_posterior_poisson, .))
ret
memory.limit()
memory.size()
clear
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
TEST <- TRUE
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
setwd("~/Documents/BayesianAB/multi_exp_sim")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
TEST <- TRUE
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
TEST <- TRUE
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
TEST <- FALSE
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
TEST <- FALSE
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
library(bayesAB)
library(ggplot2)
library (knitr)
library(plyr)
library(dplyr)
library(tidyr)
library(broom)
library(purrr)
source("basic_utils.R")
source("batch_utils.R")
TEST <- FALSE
source("parameter_space.R")
format_percent <- function(x, digits = 2) paste0(round(100 * x, digits), "%")
# Bernoulli (Proportion)
for(row in 1:nrow(ber_design)){
effect <- ber_design[row,'effect']
alpha <- ber_design[row, 'prior_alpha']
beta <- ber_design[row, 'prior_beta']
per_day <- ber_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_bernoulli(
nreps = nreps,
days = days,
pB = 0.028,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_bernoulli, .)) %>%
mutate(pval = do.call(vec_two_prop_pval, .))
print("Simulation step done!")
ber_design <- evaluate_simulation(ber_design, row, ret, thresholds, prefix, cat='bernoulli')
print("Evaluation step done!")
}
# Poisson (Count Data)
for(row in 1:nrow(pois_design)){
effect <- pois_design[row,'effect']
alpha <- pois_design[row, 'prior_alpha']
beta <- pois_design[row, 'prior_beta']
per_day <- pois_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_poisson(
nreps = nreps,
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_poisson, .)) %>%
mutate(pval = do.call(vec_two_t_pval_moves, .))
print("Simulation step done!")
pois_design <- evaluate_simulation(pois_design, row, ret, thresholds, prefix, cat='poisson')
print("Evaluation step done!")
}
# Bernoulli-Exponential (Continuous Data with Gating)
for(row in 1:nrow(ber_exp_design)){
effect_p <- ber_exp_design[row,'effect_p']
effect_lambda <- ber_exp_design[row,'effect_lambda']
alpha1 <- ber_exp_design[row, 'prior_alpha1']
beta1 <- ber_exp_design[row, 'prior_beta1']
alpha2 <- ber_exp_design[row, 'prior_alpha2']
beta2 <- ber_exp_design[row, 'prior_beta2']
per_day <- ber_exp_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(0.1, 0.01, 0.001, 0.0001, 0.00001)
prefix <- paste0(
'_ep', effect_p,
'_el', effect_lambda,
'_a1', alpha1,
'_b1', beta1,
'_a2', alpha2,
'_b2', beta2,
'_s', per_day
)
ret <- simulate_bernoulli_exponential(
nreps,
days,
pB = 0.028,
lambdaB = 5,
effect_p, # A - B
effect_lambda, # A - B
per_day,
alpha1 = alpha1,
beta1 = beta1,
alpha2 = alpha2,
beta2 = beta2)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_bernoulli_exponential, .)) %>%
mutate(pval = do.call(vec_two_t_pval_spend, .))
print("Simulation step done!")
ber_exp_design <- evaluate_simulation(ber_exp_design, row, ret, thresholds, prefix, cat='bernoulli-exponential')
print("Evaluation step done!")
}
colnames(ber_design) <- gsub("1e-05", "0.00001", (gsub("1e-04", "0.0001", colnames(ber_design))))
colnames(pois_design) <- gsub("1e-05", "0.00001", (gsub("1e-04", "0.0001", colnames(pois_design))))
colnames(ber_exp_design) <- gsub("1e-05", "0.00001", (gsub("1e-04", "0.0001", colnames(ber_exp_design))))
write.csv(ber_design, "output/design_bernoulli.csv", row.names = FALSE)
write.csv(pois_design, "output/design_poisson.csv", row.names = FALSE)
write.csv(ber_exp_design, "output/design_bernoulli_exponential.csv", row.names = FALSE)
gc()
View(evaluate_simulation)
ret
rm("ret")
prior_params_p
# Poisson (Count Data)
for(row in 1:nrow(pois_design)){
effect <- pois_design[row,'effect']
alpha <- pois_design[row, 'prior_alpha']
beta <- pois_design[row, 'prior_beta']
per_day <- pois_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_poisson(
nreps = nreps,
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_poisson, .)) %>%
mutate(pval = do.call(vec_two_t_pval_moves, .))
print("Simulation step done!")
pois_design <- evaluate_simulation(pois_design, row, ret, thresholds, prefix, cat='poisson')
print("Evaluation step done!")
}
for(row in 1:nrow(pois_design)){
effect <- pois_design[row,'effect']
alpha <- pois_design[row, 'prior_alpha']
beta <- pois_design[row, 'prior_beta']
per_day <- pois_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(1e-1, 1e-2, 1e-3, 1e-4, 1e-5)
prefix <- paste0(
'_e', effect,
'_a', alpha,
'_b', beta,
'_s', per_day
)
ret <- simulate_poisson(
nreps = nreps,
days = days,
lambdaB = 23,
effect = effect,
per_day = per_day,
alpha = alpha,
beta = beta)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_poisson, .)) %>%
mutate(pval = do.call(vec_two_t_pval_moves, .))
print("Simulation step done!")
pois_design <- evaluate_simulation(pois_design, row, ret, thresholds, prefix, cat='poisson')
print("Evaluation step done!")
}
colnames(pois_design) <- gsub("1e-05", "0.00001", (gsub("1e-04", "0.0001", colnames(pois_design))))
write.csv(pois_design, "output/design_poisson.csv", row.names = FALSE)
# Bernoulli-Exponential (Continuous Data with Gating)
for(row in 1:nrow(ber_exp_design)){
effect_p <- ber_exp_design[row,'effect_p']
effect_lambda <- ber_exp_design[row,'effect_lambda']
alpha1 <- ber_exp_design[row, 'prior_alpha1']
beta1 <- ber_exp_design[row, 'prior_beta1']
alpha2 <- ber_exp_design[row, 'prior_alpha2']
beta2 <- ber_exp_design[row, 'prior_beta2']
per_day <- ber_exp_design[row, 'sample_size_per_day'] # small sample for dev
thresholds <- c(0.1, 0.01, 0.001, 0.0001, 0.00001)
prefix <- paste0(
'_ep', effect_p,
'_el', effect_lambda,
'_a1', alpha1,
'_b1', beta1,
'_a2', alpha2,
'_b2', beta2,
'_s', per_day
)
ret <- simulate_bernoulli_exponential(
nreps,
days,
pB = 0.028,
lambdaB = 5,
effect_p, # A - B
effect_lambda, # A - B
per_day,
alpha1 = alpha1,
beta1 = beta1,
alpha2 = alpha2,
beta2 = beta2)
ret <- ret %>%
mutate(expected_loss = do.call(vec_expected_loss_bernoulli_exponential, .)) %>%
mutate(pval = do.call(vec_two_t_pval_spend, .))
print("Simulation step done!")
ber_exp_design <- evaluate_simulation(ber_exp_design, row, ret, thresholds, prefix, cat='bernoulli-exponential')
print("Evaluation step done!")
}
colnames(ber_exp_design) <- gsub("1e-05", "0.00001", (gsub("1e-04", "0.0001", colnames(ber_exp_design))))
write.csv(ber_exp_design, "output/design_bernoulli_exponential.csv", row.names = FALSE)
